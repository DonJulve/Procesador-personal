
g2.x86-64:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

0000000000401000 <_init>:
  401000:	f3 0f 1e fa          	endbr64 
  401004:	48 83 ec 08          	sub    $0x8,%rsp
  401008:	48 8b 05 e1 2f 00 00 	mov    0x2fe1(%rip),%rax        # 403ff0 <__gmon_start__@Base>
  40100f:	48 85 c0             	test   %rax,%rax
  401012:	74 02                	je     401016 <_init+0x16>
  401014:	ff d0                	call   *%rax
  401016:	48 83 c4 08          	add    $0x8,%rsp
  40101a:	c3                   	ret    

Desensamblado de la sección .plt:

0000000000401020 <puts@plt-0x10>:
  401020:	ff 35 e2 2f 00 00    	push   0x2fe2(%rip)        # 404008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401026:	ff 25 e4 2f 00 00    	jmp    *0x2fe4(%rip)        # 404010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401030 <puts@plt>:
  401030:	ff 25 e2 2f 00 00    	jmp    *0x2fe2(%rip)        # 404018 <puts@GLIBC_2.2.5>
  401036:	68 00 00 00 00       	push   $0x0
  40103b:	e9 e0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401040 <printf@plt>:
  401040:	ff 25 da 2f 00 00    	jmp    *0x2fda(%rip)        # 404020 <printf@GLIBC_2.2.5>
  401046:	68 01 00 00 00       	push   $0x1
  40104b:	e9 d0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401050 <fprintf@plt>:
  401050:	ff 25 d2 2f 00 00    	jmp    *0x2fd2(%rip)        # 404028 <fprintf@GLIBC_2.2.5>
  401056:	68 02 00 00 00       	push   $0x2
  40105b:	e9 c0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401060 <strtol@plt>:
  401060:	ff 25 ca 2f 00 00    	jmp    *0x2fca(%rip)        # 404030 <strtol@GLIBC_2.2.5>
  401066:	68 03 00 00 00       	push   $0x3
  40106b:	e9 b0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401070 <times@plt>:
  401070:	ff 25 c2 2f 00 00    	jmp    *0x2fc2(%rip)        # 404038 <times@GLIBC_2.2.5>
  401076:	68 04 00 00 00       	push   $0x4
  40107b:	e9 a0 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401080 <sysconf@plt>:
  401080:	ff 25 ba 2f 00 00    	jmp    *0x2fba(%rip)        # 404040 <sysconf@GLIBC_2.2.5>
  401086:	68 05 00 00 00       	push   $0x5
  40108b:	e9 90 ff ff ff       	jmp    401020 <_init+0x20>

0000000000401090 <exit@plt>:
  401090:	ff 25 b2 2f 00 00    	jmp    *0x2fb2(%rip)        # 404048 <exit@GLIBC_2.2.5>
  401096:	68 06 00 00 00       	push   $0x6
  40109b:	e9 80 ff ff ff       	jmp    401020 <_init+0x20>

00000000004010a0 <fwrite@plt>:
  4010a0:	ff 25 aa 2f 00 00    	jmp    *0x2faa(%rip)        # 404050 <fwrite@GLIBC_2.2.5>
  4010a6:	68 07 00 00 00       	push   $0x7
  4010ab:	e9 70 ff ff ff       	jmp    401020 <_init+0x20>

Desensamblado de la sección .text:

00000000004010b0 <main>:
double P[MAXSIZE];
double B[MAXSIZE];

int
main(int argc, char *argv[])
{
  4010b0:	41 57                	push   %r15
  4010b2:	41 56                	push   %r14
  4010b4:	41 55                	push   %r13
  4010b6:	41 54                	push   %r12
  4010b8:	55                   	push   %rbp
  4010b9:	53                   	push   %rbx
  4010ba:	48 89 f3             	mov    %rsi,%rbx
  4010bd:	48 83 ec 68          	sub    $0x68,%rsp
  clock_t tinicio, tfinal, ttotal = 0;
  clock_t etime0, etime1;
  float timer_resolution;
  float loop_mean, loop_var, test_mean, loop_std_ratio_c; 

  if (argc < 4) {
  4010c1:	83 ff 03             	cmp    $0x3,%edi
  4010c4:	7f 17                	jg     4010dd <main+0x2d>
    printf("Uso:%s <tamaño-matriz> <numero-de-iteraciones> <numero-de-pruebas>\n", argv[0]);
  4010c6:	48 8b 36             	mov    (%rsi),%rsi
  4010c9:	bf 10 20 40 00       	mov    $0x402010,%edi
  4010ce:	31 c0                	xor    %eax,%eax
  4010d0:	e8 6b ff ff ff       	call   401040 <printf@plt>
    exit(-1);
  4010d5:	83 cf ff             	or     $0xffffffff,%edi
  4010d8:	e8 b3 ff ff ff       	call   401090 <exit@plt>

#ifdef __USE_EXTERN_INLINES
__extern_inline int
__NTH (atoi (const char *__nptr))
{
  return (int) strtol (__nptr, (char **) NULL, 10);
  4010dd:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
  4010e1:	ba 0a 00 00 00       	mov    $0xa,%edx
  4010e6:	31 f6                	xor    %esi,%esi
  4010e8:	e8 73 ff ff ff       	call   401060 <strtol@plt>
  4010ed:	49 89 c4             	mov    %rax,%r12
  4010f0:	41 89 c6             	mov    %eax,%r14d
  }

  m_size = atoi(argv[1]);
  if (m_size > MAXSIZE) {
  4010f3:	3d 08 10 00 00       	cmp    $0x1008,%eax
  4010f8:	0f 8f b8 00 00 00    	jg     4011b6 <main+0x106>
  4010fe:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  401102:	ba 0a 00 00 00       	mov    $0xa,%edx
  401107:	31 f6                	xor    %esi,%esi
  401109:	e8 52 ff ff ff       	call   401060 <strtol@plt>
  40110e:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
  401112:	ba 0a 00 00 00       	mov    $0xa,%edx
  401117:	31 f6                	xor    %esi,%esi
  401119:	48 89 c5             	mov    %rax,%rbp
  40111c:	41 89 c7             	mov    %eax,%r15d
  40111f:	e8 3c ff ff ff       	call   401060 <strtol@plt>
  401124:	89 44 24 24          	mov    %eax,0x24(%rsp)
  401128:	48 89 c3             	mov    %rax,%rbx
      exit(1);
  }
   
  limit = atoi(argv[2]);
  repeat = atoi(argv[3]);
  if ((limit < 1) || (repeat < 1)) {
  40112b:	85 ed                	test   %ebp,%ebp
  40112d:	0f 8e a7 00 00 00    	jle    4011da <main+0x12a>
  401133:	85 c0                	test   %eax,%eax
  401135:	0f 8e 9f 00 00 00    	jle    4011da <main+0x12a>
      fprintf(stderr,"ERROR: el número de iteraciones y el de pruebas debe ser mayor que 0\n");
      exit(1);
  }
  
  /* Inicializacion */
  for (i = 0; i < m_size ;i++) {
  40113b:	45 85 e4             	test   %r12d,%r12d
  40113e:	0f 8e bb 00 00 00    	jle    4011ff <main+0x14f>
  401144:	41 8d 74 24 ff       	lea    -0x1(%r12),%esi
  401149:	31 c9                	xor    %ecx,%ecx
  40114b:	31 ff                	xor    %edi,%edi
    B[i] = (double) i + 4.0;    
  40114d:	66 0f ef c9          	pxor   %xmm1,%xmm1
  401151:	f2 0f 10 05 f7 11 00 	movsd  0x11f7(%rip),%xmm0        # 402350 <__dso_handle+0x348>
  401158:	00 
    P[i] = (double) i * 2.0;    
  401159:	31 c0                	xor    %eax,%eax
    B[i] = (double) i + 4.0;    
  40115b:	f2 0f 2a cf          	cvtsi2sd %edi,%xmm1
  40115f:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  401163:	f2 0f 11 04 fd 80 40 	movsd  %xmm0,0x404080(,%rdi,8)
  40116a:	40 00 
    P[i] = (double) i * 2.0;    
  40116c:	66 0f 28 c1          	movapd %xmm1,%xmm0
  401170:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  401174:	f2 0f 11 04 fd c0 c0 	movsd  %xmm0,0x40c0c0(,%rdi,8)
  40117b:	40 00 
    for (j = 0; j < m_size ; j++) {
  40117d:	0f 1f 00             	nopl   (%rax)
      A[i][j] = (double) i + (double) j;
  401180:	66 0f ef c0          	pxor   %xmm0,%xmm0
  401184:	48 89 c2             	mov    %rax,%rdx
  401187:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
  40118b:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  40118f:	f2 0f 11 84 c1 00 41 	movsd  %xmm0,0x414100(%rcx,%rax,8)
  401196:	41 00 
    for (j = 0; j < m_size ; j++) {
  401198:	48 83 c0 01          	add    $0x1,%rax
  40119c:	48 39 f2             	cmp    %rsi,%rdx
  40119f:	75 df                	jne    401180 <main+0xd0>
  for (i = 0; i < m_size ;i++) {
  4011a1:	48 8d 47 01          	lea    0x1(%rdi),%rax
  4011a5:	48 81 c1 40 80 00 00 	add    $0x8040,%rcx
  4011ac:	48 39 f7             	cmp    %rsi,%rdi
  4011af:	74 4e                	je     4011ff <main+0x14f>
  4011b1:	48 89 c7             	mov    %rax,%rdi
  4011b4:	eb 97                	jmp    40114d <main+0x9d>
      fprintf(stderr,"ERROR: el tamaño de la matriz (%d) debe ser menor que MAXSIZE (%d)\n", m_size, MAXSIZE);
  4011b6:	48 8b 3d a3 2e 00 00 	mov    0x2ea3(%rip),%rdi        # 404060 <stderr@GLIBC_2.2.5>
  4011bd:	89 c2                	mov    %eax,%edx
  4011bf:	b9 08 10 00 00       	mov    $0x1008,%ecx
  4011c4:	31 c0                	xor    %eax,%eax
  4011c6:	be 58 20 40 00       	mov    $0x402058,%esi
  4011cb:	e8 80 fe ff ff       	call   401050 <fprintf@plt>
      exit(1);
  4011d0:	bf 01 00 00 00       	mov    $0x1,%edi
  4011d5:	e8 b6 fe ff ff       	call   401090 <exit@plt>
      fprintf(stderr,"ERROR: el número de iteraciones y el de pruebas debe ser mayor que 0\n");
  4011da:	bf 10 21 40 00       	mov    $0x402110,%edi
  4011df:	ba 45 00 00 00       	mov    $0x45,%edx
  4011e4:	be 01 00 00 00       	mov    $0x1,%esi
  4011e9:	48 8b 0d 70 2e 00 00 	mov    0x2e70(%rip),%rcx        # 404060 <stderr@GLIBC_2.2.5>
  4011f0:	e8 ab fe ff ff       	call   4010a0 <fwrite@plt>
      exit(1);
  4011f5:	bf 01 00 00 00       	mov    $0x1,%edi
  4011fa:	e8 91 fe ff ff       	call   401090 <exit@plt>
   * (tiempo en milisegundos entre dos ticks del temporizador) 
   * Se calcula a partir del nº de intervalos que el temporizador cuenta cada segundo.
   * Para saber este nº de intervalos hay que usar la llamada sysconf(_SC_CLK_TCK).
   * El programa realiza esta llamada e inicializa la variable timer_resolution.
   */
  intervalos = sysconf(_SC_CLK_TCK);
  4011ff:	bf 02 00 00 00       	mov    $0x2,%edi
  clock_t total = 0, total_sqrd = 0;
  401204:	45 31 ed             	xor    %r13d,%r13d
  401207:	41 83 ec 01          	sub    $0x1,%r12d
  intervalos = sysconf(_SC_CLK_TCK);
  40120b:	e8 70 fe ff ff       	call   401080 <sysconf@plt>
  timer_resolution = 1000000.0/intervalos;
  401210:	66 0f ef c9          	pxor   %xmm1,%xmm1
  
  printf ("\n******** Datos ********\n");
  401214:	bf f2 22 40 00       	mov    $0x4022f2,%edi
  timer_resolution = 1000000.0/intervalos;
  401219:	f2 0f 10 05 27 11 00 	movsd  0x1127(%rip),%xmm0        # 402348 <__dso_handle+0x340>
  401220:	00 
  401221:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  401225:	66 0f ef e4          	pxor   %xmm4,%xmm4
  intervalos = sysconf(_SC_CLK_TCK);
  401229:	89 c5                	mov    %eax,%ebp
  timer_resolution = 1000000.0/intervalos;
  40122b:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  40122f:	f2 0f 5a e0          	cvtsd2ss %xmm0,%xmm4
  401233:	f3 0f 11 64 24 04    	movss  %xmm4,0x4(%rsp)
  printf ("\n******** Datos ********\n");
  401239:	e8 f2 fd ff ff       	call   401030 <puts@plt>
  printf("Resolucion del temporizador: %7.1f usg (%d intervalos/seg)\n", timer_resolution, intervalos);
  40123e:	66 0f ef ed          	pxor   %xmm5,%xmm5
  401242:	89 ee                	mov    %ebp,%esi
  401244:	bf a0 20 40 00       	mov    $0x4020a0,%edi
  401249:	f3 0f 5a 6c 24 04    	cvtss2sd 0x4(%rsp),%xmm5
  40124f:	b8 01 00 00 00       	mov    $0x1,%eax
  401254:	66 0f 28 c5          	movapd %xmm5,%xmm0
  401258:	f2 0f 11 6c 24 08    	movsd  %xmm5,0x8(%rsp)
  40125e:	e8 dd fd ff ff       	call   401040 <printf@plt>
  printf("Tamaño_matriz, limit, repeat:  %dx%d, %d, %d\n", m_size, m_size, limit, repeat);
  401263:	41 89 d8             	mov    %ebx,%r8d
  401266:	44 89 f9             	mov    %r15d,%ecx
  401269:	44 89 f2             	mov    %r14d,%edx
  40126c:	44 89 f6             	mov    %r14d,%esi
  40126f:	bf e0 20 40 00       	mov    $0x4020e0,%edi
  401274:	31 c0                	xor    %eax,%eax
   /* Inicio del cálculo del tiempo de ejecución de todos los bucles */ 
  times(&time_info);	/* man -s2 times */
  tinicio = time_info.tms_utime;

  /* Ejecuta el experimento "repeat" veces */
  for (r = 0; r < repeat; r++)
  401276:	31 ed                	xor    %ebp,%ebp
  printf("Tamaño_matriz, limit, repeat:  %dx%d, %d, %d\n", m_size, m_size, limit, repeat);
  401278:	e8 c3 fd ff ff       	call   401040 <printf@plt>
  printf("Ejecutando gauss v1.3.\n\n");
  40127d:	bf 0b 23 40 00       	mov    $0x40230b,%edi
  401282:	e8 a9 fd ff ff       	call   401030 <puts@plt>
  times(&time_info);	/* man -s2 times */
  401287:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  40128c:	e8 df fd ff ff       	call   401070 <times@plt>
  tinicio = time_info.tms_utime;
  401291:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  401296:	66 0f ef e4          	pxor   %xmm4,%xmm4
  40129a:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  40129f:	f3 41 0f 2a e7       	cvtsi2ss %r15d,%xmm4
  4012a4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  clock_t total = 0, total_sqrd = 0;
  4012a9:	31 c0                	xor    %eax,%eax
  4012ab:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4012b0:	f3 0f 11 64 24 20    	movss  %xmm4,0x20(%rsp)
  {
    /* Ponemos en marcha el cronometro */
    etime0 = times(&time_info);
  4012b6:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  4012bb:	e8 b0 fd ff ff       	call   401070 <times@plt>
    //user0 = time_info.tms_utime + time_info.tms_stime;
    user0 = time_info.tms_utime;
  4012c0:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8

    for (s = 0; s < limit; s++)
  4012c5:	45 31 c9             	xor    %r9d,%r9d
    etime0 = times(&time_info);
  4012c8:	48 89 c1             	mov    %rax,%rcx
    for (s = 0; s < limit; s++)
  4012cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    {
      /* Impide optimizaciones agresivas del compilador */
      A[0][0] = 0.0;
  4012d0:	48 c7 05 25 2e 01 00 	movq   $0x0,0x12e25(%rip)        # 414100 <A>
  4012d7:	00 00 00 00 

      /* Estos dos bucles anidados son que queremos medir: L/U  */
      for (i = 0; i < m_size; i++)
  4012db:	45 85 f6             	test   %r14d,%r14d
  4012de:	7e 68                	jle    401348 <main+0x298>
  4012e0:	44 89 e6             	mov    %r12d,%esi
  4012e3:	31 d2                	xor    %edx,%edx
  4012e5:	45 31 d2             	xor    %r10d,%r10d
  4012e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4012ef:	00 
      {
	for (j = 0; j < m_size; j++)
	   A[i][j] = A[i][j] - P[i]*B[j];
  4012f0:	f2 42 0f 10 14 d5 c0 	movsd  0x40c0c0(,%r10,8),%xmm2
  4012f7:	c0 40 00 
  4012fa:	31 c0                	xor    %eax,%eax
  4012fc:	0f 1f 40 00          	nopl   0x0(%rax)
  401300:	f2 0f 10 0c c5 80 40 	movsd  0x404080(,%rax,8),%xmm1
  401307:	40 00 
  401309:	48 89 c7             	mov    %rax,%rdi
  40130c:	f2 0f 10 84 c2 00 41 	movsd  0x414100(%rdx,%rax,8),%xmm0
  401313:	41 00 
  401315:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  401319:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  40131d:	f2 0f 11 84 c2 00 41 	movsd  %xmm0,0x414100(%rdx,%rax,8)
  401324:	41 00 
	for (j = 0; j < m_size; j++)
  401326:	48 83 c0 01          	add    $0x1,%rax
  40132a:	48 39 fe             	cmp    %rdi,%rsi
  40132d:	75 d1                	jne    401300 <main+0x250>
      for (i = 0; i < m_size; i++)
  40132f:	49 8d 42 01          	lea    0x1(%r10),%rax
  401333:	48 81 c2 40 80 00 00 	add    $0x8040,%rdx
  40133a:	4c 39 d6             	cmp    %r10,%rsi
  40133d:	0f 84 9d 01 00 00    	je     4014e0 <main+0x430>
  401343:	49 89 c2             	mov    %rax,%r10
  401346:	eb a8                	jmp    4012f0 <main+0x240>
    for (s = 0; s < limit; s++)
  401348:	41 83 c1 01          	add    $0x1,%r9d
  40134c:	45 39 f9             	cmp    %r15d,%r9d
  40134f:	0f 8c 7b ff ff ff    	jl     4012d0 <main+0x220>
    } /* Fin s */

    //sleep(1);

    /* Paramos el cronometro */
    etime1 = times(&time_info);
  401355:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  40135a:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
    user1 = time_info.tms_utime;

    sample_cpu = user1 - user0;
    sample_elapsed = etime1 - etime0;

    printf("*** Test %02d = %8.3f usg (%8.3f)\n", r+1,
  40135f:	83 c5 01             	add    $0x1,%ebp
  401362:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    etime1 = times(&time_info);
  401367:	e8 04 fd ff ff       	call   401070 <times@plt>
    sample_cpu = user1 - user0;
  40136c:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
			sample_cpu*timer_resolution/limit,
  401371:	66 0f ef d2          	pxor   %xmm2,%xmm2
    printf("*** Test %02d = %8.3f usg (%8.3f)\n", r+1,
  401375:	89 ee                	mov    %ebp,%esi
    sample_cpu = user1 - user0;
  401377:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
    sample_elapsed = etime1 - etime0;
  40137c:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
			sample_elapsed*timer_resolution/limit);
  401381:	66 0f ef c9          	pxor   %xmm1,%xmm1
    printf("*** Test %02d = %8.3f usg (%8.3f)\n", r+1,
  401385:	bf 58 21 40 00       	mov    $0x402158,%edi
			sample_cpu*timer_resolution/limit,
  40138a:	f3 0f 10 74 24 04    	movss  0x4(%rsp),%xmm6
			sample_elapsed*timer_resolution/limit);
  401390:	f3 0f 10 7c 24 20    	movss  0x20(%rsp),%xmm7
    sample_cpu = user1 - user0;
  401396:	4c 29 c3             	sub    %r8,%rbx
    sample_elapsed = etime1 - etime0;
  401399:	48 29 c8             	sub    %rcx,%rax
			sample_cpu*timer_resolution/limit,
  40139c:	f3 48 0f 2a d3       	cvtsi2ss %rbx,%xmm2
			sample_elapsed*timer_resolution/limit);
  4013a1:	f3 48 0f 2a c8       	cvtsi2ss %rax,%xmm1
    printf("*** Test %02d = %8.3f usg (%8.3f)\n", r+1,
  4013a6:	b8 02 00 00 00       	mov    $0x2,%eax
			sample_cpu*timer_resolution/limit,
  4013ab:	f3 0f 59 d6          	mulss  %xmm6,%xmm2
			sample_elapsed*timer_resolution/limit);
  4013af:	f3 0f 59 ce          	mulss  %xmm6,%xmm1
			sample_cpu*timer_resolution/limit,
  4013b3:	0f 28 c2             	movaps %xmm2,%xmm0
  4013b6:	f3 0f 11 54 24 30    	movss  %xmm2,0x30(%rsp)
			sample_elapsed*timer_resolution/limit);
  4013bc:	f3 0f 5e cf          	divss  %xmm7,%xmm1
			sample_cpu*timer_resolution/limit,
  4013c0:	f3 0f 5e c7          	divss  %xmm7,%xmm0
    printf("*** Test %02d = %8.3f usg (%8.3f)\n", r+1,
  4013c4:	f3 0f 5a c9          	cvtss2sd %xmm1,%xmm1
  4013c8:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  4013cc:	e8 6f fc ff ff       	call   401040 <printf@plt>

    if (sample_cpu == 0)
  4013d1:	48 85 db             	test   %rbx,%rbx
  4013d4:	f3 0f 10 54 24 30    	movss  0x30(%rsp),%xmm2
  4013da:	0f 84 1d 01 00 00    	je     4014fd <main+0x44d>
      printf("AVISO: tiempo de ejecución menor que la resolución del reloj\n");
    else if (sample_cpu < 20)
  4013e0:	48 83 fb 13          	cmp    $0x13,%rbx
  4013e4:	0f 8e 22 01 00 00    	jle    40150c <main+0x45c>
  for (r = 0; r < repeat; r++)
  4013ea:	8b 44 24 24          	mov    0x24(%rsp),%eax
    	printf("AVISO: tiempo de ejecución (%4.2f usg) menor que 20 ticks del reloj (%4.2f usg)\n", sample_cpu*timer_resolution, 20.0*timer_resolution);
    	
    total += sample_cpu;
  4013ee:	49 01 dd             	add    %rbx,%r13
    total_sqrd += (sample_cpu * sample_cpu);
  4013f1:	48 0f af db          	imul   %rbx,%rbx
  4013f5:	48 01 5c 24 10       	add    %rbx,0x10(%rsp)
  for (r = 0; r < repeat; r++)
  4013fa:	39 c5                	cmp    %eax,%ebp
  4013fc:	0f 8c b4 fe ff ff    	jl     4012b6 <main+0x206>
  } /* fin repeat */

  /* Cálculo del tiempo de ejecución de todos los bucles */
  times(&time_info);
  401402:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
  401407:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  40140c:	e8 5f fc ff ff       	call   401070 <times@plt>
  
  /* Cálculo de la varianza y desviación estándar
   * de las medidas obtenidas por el bucle repeat */
  /* VAR[X] = E[X^2] - E[X]^2 */
  /* STD[X] = sqrt(VAR[X]) */
  loop_mean = (float) total / repeat;
  401411:	66 0f ef d2          	pxor   %xmm2,%xmm2
  401415:	66 0f ef c0          	pxor   %xmm0,%xmm0
  ttotal = tfinal - tinicio;
  401419:	48 8b 6c 24 40       	mov    0x40(%rsp),%rbp
  loop_mean = (float) total / repeat;
  40141e:	f3 0f 2a d3          	cvtsi2ss %ebx,%xmm2
  ttotal = tfinal - tinicio;
  401422:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  loop_mean = (float) total / repeat;
  401427:	f3 49 0f 2a c5       	cvtsi2ss %r13,%xmm0
  ttotal = tfinal - tinicio;
  40142c:	48 29 c5             	sub    %rax,%rbp
  loop_mean = (float) total / repeat;
  40142f:	f3 0f 5e c2          	divss  %xmm2,%xmm0
  loop_var = ((float) total_sqrd / repeat) - (loop_mean * loop_mean);
  401433:	0f 28 c8             	movaps %xmm0,%xmm1
  loop_mean = (float) total / repeat;
  401436:	f3 0f 11 44 24 08    	movss  %xmm0,0x8(%rsp)
  loop_var = ((float) total_sqrd / repeat) - (loop_mean * loop_mean);
  40143c:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
  401440:	66 0f ef c0          	pxor   %xmm0,%xmm0
  401444:	f3 48 0f 2a 44 24 10 	cvtsi2ssq 0x10(%rsp),%xmm0
  40144b:	f3 0f 5e c2          	divss  %xmm2,%xmm0
  40144f:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  loop_std_ratio_c = loop_var / (loop_mean*loop_mean);
  401453:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  if (loop_std_ratio_c > 0.0025)
  401457:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  40145b:	66 0f 2f 05 fd 0e 00 	comisd 0xefd(%rip),%xmm0        # 402360 <__dso_handle+0x358>
  401462:	00 
  401463:	0f 87 cd 00 00 00    	ja     401536 <main+0x486>
	printf("AVISO: Varianza de las mediciones demasiado alta\n");

  test_mean = loop_mean / limit;
  printf("\n******** Resultados ********\n");
  401469:	bf 23 23 40 00       	mov    $0x402323,%edi
  40146e:	e8 bd fb ff ff       	call   401030 <puts@plt>
  test_mean = loop_mean / limit;
  401473:	f3 0f 10 44 24 08    	movss  0x8(%rsp),%xmm0
  401479:	f3 0f 5e 44 24 20    	divss  0x20(%rsp),%xmm0
  printf("Tiempo medio de ejecución de L/U    = %8.3f usg\n", test_mean*timer_resolution);
  40147f:	f3 0f 59 44 24 04    	mulss  0x4(%rsp),%xmm0
  401485:	bf 50 22 40 00       	mov    $0x402250,%edi
  40148a:	b8 01 00 00 00       	mov    $0x1,%eax
  40148f:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  401493:	e8 a8 fb ff ff       	call   401040 <printf@plt>
  printf("Tiempo medio de ejecución de limit  = %8.0f usg\n", loop_mean*timer_resolution);
  401498:	f3 0f 10 44 24 08    	movss  0x8(%rsp),%xmm0
  40149e:	f3 0f 59 44 24 04    	mulss  0x4(%rsp),%xmm0
  4014a4:	bf 88 22 40 00       	mov    $0x402288,%edi
  4014a9:	b8 01 00 00 00       	mov    $0x1,%eax
  4014ae:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  4014b2:	e8 89 fb ff ff       	call   401040 <printf@plt>
  printf("Tiempo total de ejecución de repeat = %8.0f usg\n\n", ttotal*timer_resolution);
  4014b7:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4014bb:	bf c0 22 40 00       	mov    $0x4022c0,%edi
  4014c0:	f3 48 0f 2a c5       	cvtsi2ss %rbp,%xmm0
  4014c5:	f3 0f 59 44 24 04    	mulss  0x4(%rsp),%xmm0
  4014cb:	b8 01 00 00 00       	mov    $0x1,%eax
  4014d0:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  4014d4:	e8 67 fb ff ff       	call   401040 <printf@plt>
  
  exit(0);
  4014d9:	31 ff                	xor    %edi,%edi
  4014db:	e8 b0 fb ff ff       	call   401090 <exit@plt>
    for (s = 0; s < limit; s++)
  4014e0:	41 83 c1 01          	add    $0x1,%r9d
  4014e4:	45 39 cf             	cmp    %r9d,%r15d
  4014e7:	0f 8e 68 fe ff ff    	jle    401355 <main+0x2a5>
      A[0][0] = 0.0;
  4014ed:	48 c7 05 08 2c 01 00 	movq   $0x0,0x12c08(%rip)        # 414100 <A>
  4014f4:	00 00 00 00 
      for (i = 0; i < m_size; i++)
  4014f8:	e9 e6 fd ff ff       	jmp    4012e3 <main+0x233>
      printf("AVISO: tiempo de ejecución menor que la resolución del reloj\n");
  4014fd:	bf 80 21 40 00       	mov    $0x402180,%edi
  401502:	e8 29 fb ff ff       	call   401030 <puts@plt>
  401507:	e9 de fe ff ff       	jmp    4013ea <main+0x33a>
    	printf("AVISO: tiempo de ejecución (%4.2f usg) menor que 20 ticks del reloj (%4.2f usg)\n", sample_cpu*timer_resolution, 20.0*timer_resolution);
  40150c:	66 0f ef c0          	pxor   %xmm0,%xmm0
  401510:	bf c0 21 40 00       	mov    $0x4021c0,%edi
  401515:	b8 02 00 00 00       	mov    $0x2,%eax
  40151a:	f2 0f 10 0d 36 0e 00 	movsd  0xe36(%rip),%xmm1        # 402358 <__dso_handle+0x350>
  401521:	00 
  401522:	f2 0f 59 4c 24 08    	mulsd  0x8(%rsp),%xmm1
  401528:	f3 0f 5a c2          	cvtss2sd %xmm2,%xmm0
  40152c:	e8 0f fb ff ff       	call   401040 <printf@plt>
  401531:	e9 b4 fe ff ff       	jmp    4013ea <main+0x33a>
	printf("AVISO: Varianza de las mediciones demasiado alta\n");
  401536:	bf 18 22 40 00       	mov    $0x402218,%edi
  40153b:	e8 f0 fa ff ff       	call   401030 <puts@plt>
  401540:	e9 24 ff ff ff       	jmp    401469 <main+0x3b9>

0000000000401545 <.annobin_elf_init.c.hot>:
  401545:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40154c:	00 00 00 
  40154f:	90                   	nop

0000000000401550 <_start>:
  401550:	f3 0f 1e fa          	endbr64 
  401554:	31 ed                	xor    %ebp,%ebp
  401556:	49 89 d1             	mov    %rdx,%r9
  401559:	5e                   	pop    %rsi
  40155a:	48 89 e2             	mov    %rsp,%rdx
  40155d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  401561:	50                   	push   %rax
  401562:	54                   	push   %rsp
  401563:	49 c7 c0 b0 16 40 00 	mov    $0x4016b0,%r8
  40156a:	48 c7 c1 40 16 40 00 	mov    $0x401640,%rcx
  401571:	48 c7 c7 b0 10 40 00 	mov    $0x4010b0,%rdi
  401578:	ff 15 6a 2a 00 00    	call   *0x2a6a(%rip)        # 403fe8 <__libc_start_main@GLIBC_2.2.5>
  40157e:	f4                   	hlt    

000000000040157f <.annobin_init.c>:
  40157f:	90                   	nop

0000000000401580 <_dl_relocate_static_pie>:
  401580:	f3 0f 1e fa          	endbr64 
  401584:	c3                   	ret    

0000000000401585 <.annobin__dl_relocate_static_pie.end>:
  401585:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40158c:	00 00 00 
  40158f:	90                   	nop

0000000000401590 <deregister_tm_clones>:
  401590:	48 8d 3d c9 2a 00 00 	lea    0x2ac9(%rip),%rdi        # 404060 <stderr@GLIBC_2.2.5>
  401597:	48 8d 05 c2 2a 00 00 	lea    0x2ac2(%rip),%rax        # 404060 <stderr@GLIBC_2.2.5>
  40159e:	48 39 f8             	cmp    %rdi,%rax
  4015a1:	74 15                	je     4015b8 <deregister_tm_clones+0x28>
  4015a3:	48 8b 05 36 2a 00 00 	mov    0x2a36(%rip),%rax        # 403fe0 <_ITM_deregisterTMCloneTable@Base>
  4015aa:	48 85 c0             	test   %rax,%rax
  4015ad:	74 09                	je     4015b8 <deregister_tm_clones+0x28>
  4015af:	ff e0                	jmp    *%rax
  4015b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4015b8:	c3                   	ret    
  4015b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004015c0 <register_tm_clones>:
  4015c0:	48 8d 3d 99 2a 00 00 	lea    0x2a99(%rip),%rdi        # 404060 <stderr@GLIBC_2.2.5>
  4015c7:	48 8d 35 92 2a 00 00 	lea    0x2a92(%rip),%rsi        # 404060 <stderr@GLIBC_2.2.5>
  4015ce:	48 29 fe             	sub    %rdi,%rsi
  4015d1:	48 89 f0             	mov    %rsi,%rax
  4015d4:	48 c1 ee 3f          	shr    $0x3f,%rsi
  4015d8:	48 c1 f8 03          	sar    $0x3,%rax
  4015dc:	48 01 c6             	add    %rax,%rsi
  4015df:	48 d1 fe             	sar    %rsi
  4015e2:	74 14                	je     4015f8 <register_tm_clones+0x38>
  4015e4:	48 8b 05 0d 2a 00 00 	mov    0x2a0d(%rip),%rax        # 403ff8 <_ITM_registerTMCloneTable@Base>
  4015eb:	48 85 c0             	test   %rax,%rax
  4015ee:	74 08                	je     4015f8 <register_tm_clones+0x38>
  4015f0:	ff e0                	jmp    *%rax
  4015f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4015f8:	c3                   	ret    
  4015f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000401600 <__do_global_dtors_aux>:
  401600:	f3 0f 1e fa          	endbr64 
  401604:	80 3d 5d 2a 00 00 00 	cmpb   $0x0,0x2a5d(%rip)        # 404068 <completed.0>
  40160b:	75 13                	jne    401620 <__do_global_dtors_aux+0x20>
  40160d:	55                   	push   %rbp
  40160e:	48 89 e5             	mov    %rsp,%rbp
  401611:	e8 7a ff ff ff       	call   401590 <deregister_tm_clones>
  401616:	c6 05 4b 2a 00 00 01 	movb   $0x1,0x2a4b(%rip)        # 404068 <completed.0>
  40161d:	5d                   	pop    %rbp
  40161e:	c3                   	ret    
  40161f:	90                   	nop
  401620:	c3                   	ret    
  401621:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  401628:	00 00 00 00 
  40162c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401630 <frame_dummy>:
  401630:	f3 0f 1e fa          	endbr64 
  401634:	eb 8a                	jmp    4015c0 <register_tm_clones>
  401636:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  40163d:	00 00 00 

0000000000401640 <__libc_csu_init>:
  401640:	f3 0f 1e fa          	endbr64 
  401644:	41 57                	push   %r15
  401646:	49 89 d7             	mov    %rdx,%r15
  401649:	41 56                	push   %r14
  40164b:	49 89 f6             	mov    %rsi,%r14
  40164e:	41 55                	push   %r13
  401650:	41 89 fd             	mov    %edi,%r13d
  401653:	41 54                	push   %r12
  401655:	4c 8d 25 a4 27 00 00 	lea    0x27a4(%rip),%r12        # 403e00 <__frame_dummy_init_array_entry>
  40165c:	55                   	push   %rbp
  40165d:	48 8d 2d a4 27 00 00 	lea    0x27a4(%rip),%rbp        # 403e08 <__do_global_dtors_aux_fini_array_entry>
  401664:	53                   	push   %rbx
  401665:	4c 29 e5             	sub    %r12,%rbp
  401668:	48 83 ec 08          	sub    $0x8,%rsp
  40166c:	e8 8f f9 ff ff       	call   401000 <_init>
  401671:	48 c1 fd 03          	sar    $0x3,%rbp
  401675:	74 1f                	je     401696 <__libc_csu_init+0x56>
  401677:	31 db                	xor    %ebx,%ebx
  401679:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  401680:	4c 89 fa             	mov    %r15,%rdx
  401683:	4c 89 f6             	mov    %r14,%rsi
  401686:	44 89 ef             	mov    %r13d,%edi
  401689:	41 ff 14 dc          	call   *(%r12,%rbx,8)
  40168d:	48 83 c3 01          	add    $0x1,%rbx
  401691:	48 39 dd             	cmp    %rbx,%rbp
  401694:	75 ea                	jne    401680 <__libc_csu_init+0x40>
  401696:	48 83 c4 08          	add    $0x8,%rsp
  40169a:	5b                   	pop    %rbx
  40169b:	5d                   	pop    %rbp
  40169c:	41 5c                	pop    %r12
  40169e:	41 5d                	pop    %r13
  4016a0:	41 5e                	pop    %r14
  4016a2:	41 5f                	pop    %r15
  4016a4:	c3                   	ret    

00000000004016a5 <.annobin___libc_csu_fini.start>:
  4016a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4016ac:	00 00 00 00 

00000000004016b0 <__libc_csu_fini>:
  4016b0:	f3 0f 1e fa          	endbr64 
  4016b4:	c3                   	ret    

Desensamblado de la sección .fini:

00000000004016b8 <_fini>:
  4016b8:	f3 0f 1e fa          	endbr64 
  4016bc:	48 83 ec 08          	sub    $0x8,%rsp
  4016c0:	48 83 c4 08          	add    $0x8,%rsp
  4016c4:	c3                   	ret    
